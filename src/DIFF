36,39c36,37
< //LOCAL   void collect_cell_ptst(INTRP_CELL*,int*,COMPONENT,Front*,double*,
< //                        double (*func)(Locstate));
< LOCAL   void collect_cell_ptst(INTRP_CELL*,int*,double*,COMPONENT,Front*,
<                         double*,double (*func)(Locstate));
---
> LOCAL 	void collect_cell_ptst(INTRP_CELL*,int*,double*,COMPONENT,Front*,
> 			double*,double (*func)(Locstate));
51d48
< /*
66,114c63
< }	// end FT_Propagate 
< */
< 
< EXPORT  void FT_Propagate(
<         Front *front)
< {
<         double dt_frac;
<         Front *newfront;
<         INTERFACE *tmp_intfc = NULL;
< 
<         //if(front->step > 0 && front->regrid_restart == NO)
<         if(front->step > 0)
<         {
<             /* The make_grid_intfc is used for the information of the previous interface. */
<             prev_interface(front->interf) = front->grid_intfc;
<             tmp_intfc = make_grid_intfc(front->interf,EXPANDED_DUAL_GRID,NULL);
<         }
< 
<         start_clock("FrontAdvance");
<         FrontAdvance(front->dt,&dt_frac,front,&newfront,
<                                 (POINTER)NULL);
< 
<         stop_clock("FrontAdvance");
< 
<         if (newfront != NULL)
<             prev_interface(newfront->interf) = NULL;
<         if (front->grid_intfc != NULL)
<             FT_FreeGridIntfc(front);
<         /*
<         if(front->restart_small_dt == YES)
<         {
<             if (newfront != NULL)
<             {
<                 if (newfront->interf != NULL)
<                     (void) delete_interface(newfront->interf);
<                 free(newfront);
<                 newfront = NULL;
<             }
<         }
<         else
<         */
<             assign_interface_and_free_front(front,newfront);
<         //if(front->step > 0 && front->regrid_restart == NO)
<         if(front->step > 0)
<             prev_interface(front->interf) = tmp_intfc;
<         FT_MakeGridIntfc(front);
<         if (tmp_intfc != NULL && front->step > 0)
<             free_grid_intfc(tmp_intfc);
< }       /* end FT_Propagate */
---
> }	/* end FT_Propagate */
144,147c93,95
<         *dt_frac = 0.5;
<         front->dt_frac = dt_frac;
<         set_cut_ref_fail(NO);
<         status = advance_front(front->dt,dt_frac,front,newfront,wave);/* mixed_advance_front3d called */
---
> 	*dt_frac = 1.0;
> 	front->dt_frac = dt_frac;
>         status = advance_front(front->dt,dt_frac,front,newfront,wave);
152,170c100,102
<             if (status == MODIFY_TIME_STEP)
<                 front->dt = (*dt_frac)*start_dt;
<             modi_max_sqr_length(YES);
<             //if (count == 9)
<             //    set_redistribution(YES);
<             front->bad_step = YES;
<             if (count == 10)
<             {
<                 front->restart_small_dt = YES;
<                 front->dt = start_dt;
<                 set_use_bd_dist(NO);
<                 return;
<                 set_gb(YES);
<             }
<             status = advance_front(front->dt,dt_frac,front,newfront,wave);/* mixed_advance_front3d called */
<             front->bad_step = NO;
<             set_redistribution(NO);
<             modi_max_sqr_length(NO);
<             set_gb(NO);
---
> 	    if (status == MODIFY_TIME_STEP)
>             	front->dt = (*dt_frac)*start_dt;
>             status = advance_front(front->dt,dt_frac,front,newfront,wave);
172,176c104,108
<             if (count > 12)
<             {
<                 screen("ERROR: in FrontAdvance() modified step 10 times\n");
<                 clean_up(ERROR);
<             }
---
>             if (count > 15) 
> 	    {
> 		screen("ERROR: in FrontAdvance() modified step 10 times\n");
> 	    	clean_up(ERROR);
> 	    }
178c110
< }       /* end FrontAdvance */
---
> }	/* end FrontAdvance */
245c177
<         boolean sav_intrp_state = interpolate_intfc_states(intfc);
---
> 	boolean sav_intrp_state = interpolate_intfc_states(intfc);
247c179
<         interpolate_intfc_states(intfc) = YES;
---
> 	interpolate_intfc_states(intfc) = YES;
254,257c186,187
<             reset_normal_on_intfc(fr->interf);
<             //Surface_redistribute(fr,&force_redistribute); /* surface_redistribute called */
<             smooth_redistribute(fr);
<             smooth_redistribute_temp(fr);
---
> 	    reset_normal_on_intfc(fr->interf);
>             Surface_redistribute(fr,&force_redistribute);
259c189
<         interpolate_intfc_states(intfc) = sav_intrp_state;
---
> 	interpolate_intfc_states(intfc) = sav_intrp_state;
262d191
< /*
301c230
< }       // end FT_OptimizeMesh 
---
> }       /* end FT_OptimizeMesh */
318c247
< }	// end FT_OptimizeSurfMesh 
---
> }	/* end FT_OptimizeSurfMesh */
335,336c264
< }	// end FT_OptimizeCurveMesh 
< */
---
> }	/* end FT_OptimizeCurveMesh */
379,380c307,308
< EXPORT  void FrontResetTriParams(
<         Front *fr)
---
> EXPORT 	void FrontResetTriParams(
> 	Front *fr)
382,383c310,319
<         double max_tri_area_fac = 1.8;
<         double min_tri_area_fac = 0.5;
---
> 	double max_tri_area_fac = 2.0;
> 	double min_tri_area_fac = 0.5;
> 	double min_angle_at_vertex = radians(15.0);
> 	double max_scaled_tri_side = 1.3;
> 
> 	FrontSetTriParams(fr,max_tri_area_fac,
> 			     min_tri_area_fac,
> 			     min_angle_at_vertex,
> 			     max_scaled_tri_side);
> }	/* end FrontResetTriParams */
385,396d320
<         double min_angle_at_vertex = radians(15.0);
<         double max_scaled_tri_side = 1.0;
<         /*
<         double min_angle_at_vertex = radians(30.0);
<         double max_scaled_tri_side = 1.0;
<         */
< 
<         FrontSetTriParams(fr,max_tri_area_fac,
<                              min_tri_area_fac,
<                              min_angle_at_vertex,
<                              max_scaled_tri_side);
< }       /* end FrontResetTriParams */
596d519
< /*
625,626c548
< }	// end FT_HyperSurfAtGridCrossing 
< */
---
> }	/* end FT_HyperSurfAtGridCrossing */
677,680c599,603
< 	// if comp is not associated with hs or not specified, normal
< 	//   is the natural normal of the surface.
< 	//if (comp == negative_component(*hs) ||
< 	//    comp == positive_component(*hs))
---
> 	/* if comp is not associated with hs or not specified, normal
> 	   is the natural normal of the surface.
> 	if (comp == negative_component(*hs) ||
> 	    comp == positive_component(*hs))
> 	*/
717c640
< }	// end FT_NormalAtGridCrossing 
---
> }	/* end FT_NormalAtGridCrossing */
757d679
< 
760a683,731
> EXPORT	boolean FT_StateStructAtGridCrossing2(
> 	Front *front,
> 	int *icoords,
> 	GRID_DIRECTION dir,
> 	COMPONENT comp,
> 	Locstate *state,
> 	HYPER_SURF **hs,
> 	HYPER_SURF_ELEMENT **hse,
> 	double *crx_coords)
> {
>         int j;
> 	int crx_index;
> 	INTERFACE *grid_intfc = front->grid_intfc;
> 	static CRXING *crxs[MAX_NUM_CRX];
> 	int i,nc,dim = grid_intfc->dim;
> 
> 	crx_index = 0;
> 	nc = GridSegCrossing(crxs,icoords,dir,grid_intfc);
> 	if (nc == 0) return NO;
> 	if (dir == EAST || dir == NORTH || dir == UPPER)
> 	    crx_index = 0;
> 	else
> 	    crx_index = nc - 1;
> 
> 	*hs = crxs[crx_index]->hs;
> 	if (comp == negative_component(*hs))
> 	    *state = left_state(crxs[crx_index]->pt);
> 	else if (comp == positive_component(*hs))
> 	    *state = right_state(crxs[crx_index]->pt);
> 	else
> 	{
> 	    *state = NULL;
> 	    screen("ERROR: In FT_StateVarAtGridCrossing(),"
> 			"component does not match\n");
> 	    return NO;
> 	}
> 	for (i = 0; i < dim; ++i)
> 	    crx_coords[i] = Coords(crxs[crx_index]->pt)[i];
> 	if (dim == 2)
> 	{
> 	    *hse = Hyper_surf_element(crxs[crx_index]->bond);
> 	}
> 	else if (dim == 3)
> 	{
> 	    *hse = Hyper_surf_element(crxs[crx_index]->tri);
> 	}
> 	return YES;
> }	/* end FT_StateStructAtGridCrossing2 */
> 
763d733
< /*
771c741
<         double *default_ans)
---
> 	double *default_ans)
777a748
> 	extrapolation_permitted = front->extrapolation_permitted;
782a754
> 	    uni_array(&blk_cell->dist,MAX_NUM_VERTEX_IN_CELL,sizeof(double));
789c761
< 	        lin_cell_tol *= 0.00001*gr->h[i];
---
> 	    	lin_cell_tol *= 0.00001*gr->h[i];
797,799c769,770
< 	//collect_cell_ptst(blk_cell,icoords,comp,front,grid_array,get_state);
<         collect_cell_ptst(blk_cell,icoords,coords,comp,front,grid_array,
<                                 get_state);
---
> 	collect_cell_ptst(blk_cell,icoords,coords,comp,front,grid_array,
> 				get_state);
801a773,774
> 	    if (debugging("the_pt"))
> 		printf("Bilinear cell interpolate\n");
806a780,781
> 	    if (debugging("the_pt"))
> 		printf("Linear cell interpolate\n");
809a785,790
> 	else if (default_ans != NULL)
> 	{
> 	    if (debugging("the_pt"))
> 		printf("Using default interpolate\n");
> 	    *ans = *default_ans;
> 	}
812a794,795
> 	    if (debugging("the_pt"))
> 		printf("Using nearest_intfc_state()\n");
815c798
< 	    nearest_intfc_state(coords,comp,front->interf,state,NULL,NULL);
---
> 	    nearest_intfc_state(coords,comp,front->grid_intfc,state,NULL,NULL);
819,890c802
< }	// end FT_IntrpStateVarAtCoords 
< */
< 
< EXPORT  boolean FT_IntrpStateVarAtCoords(
<         Front *front,
<         COMPONENT comp,
<         double *coords,
<         double *grid_array,
<         double (*get_state)(Locstate),
<         double *ans,
<         double *default_ans)
< {
<         int icoords[MAXD];
<         INTERFACE *grid_intfc = front->grid_intfc;
<         static INTRP_CELL *blk_cell;
<         RECT_GRID *gr = &topological_grid(grid_intfc);
<         int i,dim = gr->dim;
<         extrapolation_permitted = front->extrapolation_permitted;
< 
<         if (blk_cell == NULL)
<         {
<             scalar(&blk_cell,sizeof(INTRP_CELL));
<             uni_array(&blk_cell->var,MAX_NUM_VERTEX_IN_CELL,sizeof(double));
<             uni_array(&blk_cell->dist,MAX_NUM_VERTEX_IN_CELL,sizeof(double));
<             bi_array(&blk_cell->coords,MAX_NUM_VERTEX_IN_CELL,MAXD,
<                                                 sizeof(double));
<             bi_array(&blk_cell->p_lin,MAXD+1,MAXD,sizeof(double));
<             uni_array(&blk_cell->var_lin,MAXD+1,sizeof(double));
<             lin_cell_tol = 1.0;
<             for (i = 0; i < dim; ++i)
<                 lin_cell_tol *= 0.00001*gr->h[i];
<         }
< 
<         if (!rect_in_which(coords,icoords,gr))
<         {
<             *ans = 0.0;
<             //return NO;
<         }
<         collect_cell_ptst(blk_cell,icoords,coords,comp,front,grid_array,
<                                 get_state);
<         if (blk_cell->is_bilinear)
<         {
<             if (debugging("the_pt"))
<                 printf("Bilinear cell interpolate\n");
<             *ans = FrontBilinIntrp(coords,blk_cell,NO);
<             return YES;
<         }
<         else if (build_linear_element(blk_cell,coords))
<         {
<             if (debugging("the_pt"))
<                 printf("Linear cell interpolate\n");
<             *ans = FrontLinIntrp(coords,blk_cell,NO);
<             return YES;
<         }
<         else if (default_ans != NULL)
<         {
<             if (debugging("the_pt"))
<                 printf("Using default interpolate\n");
<             *ans = *default_ans;
<         }
<         else
<         {
<             static Locstate state;
<             if (debugging("the_pt"))
<                 printf("Using nearest_intfc_state()\n");
<             if (state == NULL)
<                 scalar(&state,front->sizest);
<             nearest_intfc_state(coords,comp,front->grid_intfc,state,NULL,NULL);
<             *ans = get_state(state);
<             return YES;
<         }
< }       /* end FT_IntrpStateVarAtCoords */
---
> }	/* end FT_IntrpStateVarAtCoords */
901d812
< 
927c838
<             //return NO;
---
>             return NO;
